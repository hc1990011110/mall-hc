services:
  mysql:
    image: mysql:5.7
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root #设置root帐号密码
      MYSQL_DATABASE: mall              # 初始数据库名称
    ports:
      - 3307:3306
    volumes:
      - ./mydata/mysql/data/db:/var/lib/mysql #数据文件挂载
      - ./mydata/mysql/data/conf:/etc/mysql/conf.d #配置文件挂载
      - ./mydata/mysql/log:/var/log/mysql #日志文件挂载
  redis:
    image: redis:7
    command: redis-server --appendonly yes
    volumes:
      - ./mydata/redis/data:/data #数据文件挂载
    ports:
      - 6380:6379
  nginx:
    image: nginx:1.22
    volumes:
      - ./mydata/nginx/conf:/etc/nginx #配置文件挂载
      - ./mydata/nginx/html:/usr/share/nginx/html #静态资源根目录挂载
      - ./mydata/nginx/log:/var/log/nginx #日志文件挂载
    ports:
      - 81:80
  rabbitmq:
    image: rabbitmq:3.9-management
    volumes:
      - ./mydata/rabbitmq/data:/var/lib/rabbitmq #数据文件挂载
      - ./mydata/rabbitmq/log:/var/log/rabbitmq #日志文件挂载
    ports:
      - 5673:5672
      - 15673:15672
    environment:
      RABBITMQ_DEFAULT_USER: mall
      RABBITMQ_DEFAULT_PASS: mall
      RABBITMQ_DEFAULT_VHOST: /mall             # 创建/mall虚拟主机
  elasticsearch:
    image: elasticsearch:7.17.3
    user: root
    environment:
      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch
      - "discovery.type=single-node" #以单一节点模式启动
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m" #设置使用jvm内存大小
    volumes:
      - ./mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载
      - ./mydata/elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载
    entrypoint: >
      sh -c "
        if [ ! -d '/usr/share/elasticsearch/plugins/ik' ]; then
          elasticsearch-plugin install --batch https://github.com/infinilabs/analysis-ik/releases/download/v7.17.3/elasticsearch-analysis-ik-7.17.3.zip;
        fi;
        exec /usr/local/bin/docker-entrypoint.sh elasticsearch
      "
    ports:
      - 9201:9200
      - 9301:9300
  logstash:
    image: logstash:7.17.3
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./mydata/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf #挂载logstash的配置文件
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
    links:
      - elasticsearch:es #可以用es这个域名访问elasticsearch服务
    ports:
      - 4660:4560
      - 4661:4561
      - 4662:4562
      - 4663:4563
  kibana:
    image: kibana:7.17.3
    links:
      - elasticsearch:es #可以用es这个域名访问elasticsearch服务
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
    environment:
      - "elasticsearch.hosts=http://es:9200" #设置访问elasticsearch的地址
    ports:
      - 5602:5601
  mongo:
    image: mongo:4
    volumes:
      - ./mydata/mongo/db:/data/db #数据文件挂载
    ports:
      - 27018:27017
  nacos-registry:
    image: nacos/nacos-server:v2.1.0
    environment:
      - "MODE=standalone"
    ports:
      - 8849:8848
      - 9849:9848
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181    # 确保设置此变量
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./mydata/zookeeper/data:/data
      - ./mydata/zookeeper/datalog:/datalog

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    user: "0:0"  # root 用户
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT_LOCAL://0.0.0.0:9092,PLAINTEXT_DOCKER://kafka:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_LOCAL://localhost:9092,PLAINTEXT_DOCKER://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_LOCAL:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_DOCKER
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_MESSAGE_MAX_BYTES: 200000000           # 最大消息大小
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 200000000    # 监听连接的最大请求大小
    depends_on:
      - zookeeper
    volumes:
      - ./mydata/kafka:/var/lib/kafka/data
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: false
    ports:
      - "18080:8080"
    depends_on:
      - kafka
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # 映射根目录的 prometheus.yml
    ports:
      - "9090:9090"
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"  # Grafana 默认端口
    depends_on:
      - prometheus  # 确保 Prometheus 在 Grafana 之前启动
  # RocketMQ Nameserver
  rocketmq-nameserver:
    image: apache/rocketmq:latest
    ports:
      - "9876:9876" # 默认端口
    environment:
      - JAVA_OPT_EXT=-Duser.home=/home/rocketmq -server -Xms512m -Xmx512m -Xmn256m
    volumes:
      - ./mydata/rocketmq/nameserver/logs:/home/rocketmq/logs  # 日志存储目录
      - ./mydata/rocketmq/nameserver/store:/home/rocketmq/store  # 数据存储目录
    command: "sh mqnamesrv"
  # RocketMQ Broker
  rocketmq-broker:
    image: apache/rocketmq:latest
    ports:
      - "10911:10911"      # Broker RPC 端口
      - "10909:10909"      # Broker HA 端口
      - "10912:10912"      # Broker admin 端口（可选）
    environment:
      - NAMESRV_ADDR=rocketmq-nameserver:9876 # 指定 Nameserver 地址
      - JAVA_OPT_EXT=-Duser.home=/home/rocketmq -server -Xms512m -Xmx512m -Xmn256m
      - ROCKETMQ_BROKER_ROLE=ASYNC_MASTER
      - ROCKETMQ_ENABLE_DLEQ=true # 启用延迟队列
    depends_on:
      - rocketmq-nameserver
    volumes:
      - ./mydata/rocketmq/broker/logs:/home/rocketmq/logs
      - ./mydata/rocketmq/broker/store:/home/rocketmq/store
    command: "sh mqbroker"
  rocketmq-dashboard:
    image: apacherocketmq/rocketmq-dashboard:latest
    ports:
      - "18081:8080"       # Dashboard Web 端口
    environment:
      - JAVA_OPTS=-Drocketmq.namesrv.addr=rocketmq-nameserver:9876
    depends_on:
      - rocketmq-nameserver
    restart: always

